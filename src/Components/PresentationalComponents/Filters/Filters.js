import { ConditionalFilter, FilterDropdown } from '@redhat-cloud-services/frontend-components';
import debounce from 'lodash/debounce';
import propTypes from 'prop-types';
import React from 'react';
import { LoginMainHeader } from '@patternfly/react-core';

const Filters = props => {
    const { filterValues, filterCategories, searchPlaceholder, apply } = props;
    const [filterValue, updateFilterValue] = React.useState();
    const [value, onChange] = React.useState();

    const [applyFunction] = React.useState(() => debounce(filter => apply({ filter, page: 1 }), 400));

    React.useEffect(() => applyFunction(filterValue), [filterValue]);
    React.useEffect(() => updateFilterValue(filterValues.filter), [filterValues.filter]);

    const addFilter = (param, value, type) => {
        let newFilter;
        if (type === 'radio' || param === 'show_all') {
            newFilter = { [param]: value };
        } else {
            newFilter = filterValues[param] ? { [param]: `${filterValues[param]},${value}` } : { [param]: value };
        }

        apply({ ...newFilter, page: 1 });
    };

    const removeFilter = (key, value) => {
        const values = value.split(',');
        const newFilter = {
            [key]: filterValues[key]
            .split(',')
            .filter(item => !values.includes(item))
            .join(',')
        };

        if (newFilter.length !== 0) {
            apply({ ...newFilter, page: 1 });
        } else {
            const filter = { ...filterValues, [key]: undefined };
            apply({ ...filter, page: 1 });
        }
    };

    const logMe = (newSelection, clickedGroup, clickedItem) => {
        console.log(newSelection);
        console.log(clickedGroup);
        console.log(clickedItem);
    };

    const myFilterCategories = filterCategories.map(item => ({
        label: item.title,
        type: item.type,
        filterValues: { items: item.values, value, onChange: (event, newSelection, clickedGroup, clickedItem) => logMe(newSelection, clickedGroup, clickedItem) }
    }));
    console.log(value);
    return (
        <React.Fragment>
            <div>
                <ConditionalFilter items={myFilterCategories} />
            </div>
            {/*<div>
                <FilterDropdown
                    addFilter={addFilter}
                    removeFilter={removeFilter}
                    filters={filterValues}
                    filterCategories={filterCategories}
                />
            </div>*/}
        </React.Fragment>
    );
};

Filters.propTypes = {
    filterValues: propTypes.object,
    filterCategories: propTypes.array,
    searchPlaceholder: propTypes.string,
    apply: propTypes.func
};

export default Filters;
