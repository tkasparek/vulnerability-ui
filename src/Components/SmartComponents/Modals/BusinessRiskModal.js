import { Form, FormGroup, Radio, Stack, StackItem, TextInput } from '@patternfly/react-core';
import propTypes from 'prop-types';
import React, { useEffect, useState } from 'react';
import { setBusinessRisk } from '../../../Helpers/APIHelper';
import { businessRiskOptions } from '../../../Helpers/constants';
import BaseModal from './BaseModal';

export const BusinessRiskModal = ({ cves, updateRef }) => {
    const [cveList] = useState(cves);
    const [businessRiskId, setBusinessRiskId] = useState('0');
    const [label, setLabel] = useState();

    useEffect(() => {
        getDefaultBusinessRisk(), getDefaultLabel();
    }, [cves]);
    useEffect(getDefaultLabel, [cves]);

    const handleOnRadioChange = (_, event) => {
        const { value } = event.currentTarget;
        setBusinessRiskId(value);
    };

    const handleOnLabelChange = value => {
        setLabel(value);
    };

    const handleSave = () => {
        return setBusinessRisk({
            business_risk_id: parseInt(businessRiskId),
            cve: cveList.map(item => item.id),
            business_risk_text: label
        }).then(updateRef);
    };

    function getDefaultBusinessRisk() {
        setBusinessRiskId((cveList && cveList.length === 1 && cveList[0].business_risk_id.toString()) || '0');
    }

    function getDefaultLabel() {
        setLabel((cveList && cveList.length === 1 && cveList[0].justification) || '');
    }

    const successNotification = {
        variant: 'success',
        title: `Business risk updated for ${cveList.length} CVEs`
    };

    return (
        <BaseModal items={cveList} onSave={handleSave} onSuccessNotification={successNotification} title="Edit business risk">
            <Stack gutter={'md'}>
                <StackItem>Business risk can be used to mark which CVEs are most important to you business.</StackItem>
                <StackItem>
                    <Form>
                        <FormGroup label="Business risk" fieldId={'businessRiskId'}>
                            {businessRiskOptions.map(item => (
                                <Radio
                                    value={item.value}
                                    isChecked={businessRiskId === item.value}
                                    onChange={handleOnRadioChange}
                                    label={item.label}
                                    key={item.value}
                                    id={item.value}
                                    name={item.label}
                                    aria-label={item.label}
                                />
                            ))}
                        </FormGroup>
                        <FormGroup label="Justification" fieldId={'label'}>
                            <TextInput type="text" onChange={handleOnLabelChange} value={label} aria-label={'justification'} />
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

BusinessRiskModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func
};

export default BusinessRiskModal;
