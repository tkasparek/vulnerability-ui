import { Checkbox, Form, FormGroup, Split, SplitItem, Stack, StackItem } from '@patternfly/react-core';
import { InfoCircleIcon } from '@patternfly/react-icons';
import propTypes from 'prop-types';
import React, { useState } from 'react';
import { setCveStatus, setSystemCveStatus } from '../../../Helpers/APIHelper';
import BaseModal, { useJustificationInput, useStatusSelect } from './BaseModal';

export const CveStatusModal = ({ cves, updateRef }) => {
    const [cveList] = useState(cves);
    const { StatusSelect, statusId } = useStatusSelect(getDefaultStatus());
    const { JustificationInput, justification } = useJustificationInput(getDefaultLabel());
    const [checkboxState, setCheckboxState] = useState(false);

    const handleSave = () => {
        const cveIds = cveList.map(item => item.id);
        return setCveStatus({
            status_id: parseInt(statusId),
            cve: cveIds,
            status_text: justification
        })
        .then(() => !checkboxState && setSystemCveStatus({ cve: cveIds }))
        .then(updateRef);
    };

    function getDefaultStatus() {
        return (cveList && cveList.length === 1 && cveList[0].status_id.toString()) || '0';
    }

    function getDefaultLabel() {
        return (cveList && cveList.length === 1 && cveList[0].justification) || '';
    }

    const successNotification = {
        variant: 'success',
        title: `Status updated for ${cveList.length} CVEs`
    };

    return (
        <BaseModal
            items={cveList}
            onSave={handleSave}
            onSuccessNotification={successNotification}
            title="Set status for this CVE and all hosts"
        >
            <Stack gutter={'md'}>
                <StackItem>
                    <Form key="key">
                        {StatusSelect}
                        {JustificationInput}
                        <FormGroup fieldId={'overwrite'}>
                            <Checkbox
                                label="Do not overwrite individual host status"
                                id="alt-form-checkbox-1"
                                name="alt-form-checkbox-1"
                                isChecked={checkboxState}
                                onChange={checked => setCheckboxState(checked)}
                            />
                        </FormGroup>
                        <FormGroup fieldId={'info'}>
                            <Split>
                                <SplitItem>
                                    <InfoCircleIcon size="md" color="var(--pf-global--active-color--400)" />
                                </SplitItem>
                                <SplitItem isFilled>
                                    This status is applied to all existing matching hosts. Any new matching hosts will have the
                                    status &quot;Not review&quot;
                                </SplitItem>
                            </Split>
                        </FormGroup>
                    </Form>
                </StackItem>
            </Stack>
        </BaseModal>
    );
};

CveStatusModal.propTypes = {
    cves: propTypes.array,
    updateRef: propTypes.func
};

export default CveStatusModal;
